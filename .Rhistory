results <- list()
# Loop through each date to calculate metrics
for (date in unique_dates) {
daily_data <- cage_20_data %>%
filter(Date == date)
metrics <- calculate_metrics(daily_data)
results[[as.character(date)]] <- metrics
}
View(cage_20_data)
# Define the function to find onset time based on sustained activity above the mean for a given duration
find_onset_time <- function(df, cog_time, daily_mean, interval_minutes = 10, sustained_minutes = 30) {
duration_threshold <- sustained_minutes * 60
# Onset: first time activity reaches above the mean and stays above for sustained duration before CoG
df_before_cog <- df %>%
filter(timestamp <= cog_time) %>%
arrange(timestamp)
cumulative_time_above_mean <- 0
onset_time <- NA
for (i in seq_len(nrow(df_before_cog))) {
if (df_before_cog$rolling_mean_10[i] > daily_mean) {
cumulative_time_above_mean <- cumulative_time_above_mean + interval_minutes * 60
if (cumulative_time_above_mean >= duration_threshold) {
# Check if the activity falls back below the mean
if (all(df_before_cog$rolling_mean_10[i:(i + duration_threshold / (interval_minutes * 60))] > daily_mean, na.rm = TRUE)) {
onset_time <- df_before_cog$timestamp[i]
break
}
}
} else {
cumulative_time_above_mean <- 0
}
}
return(onset_time)
}
# Calculate daily mean, onset time with custom function, and offset time with rolling mean of 30
calculate_metrics <- function(data) {
data <- data %>%
arrange(timestamp) %>%
mutate(rolling_mean_10 = rollmean(HopsPerMinute, k = 10, fill = NA, align = "right"),
rolling_mean_30 = rollmean(HopsPerMinute, k = 30, fill = NA, align = "right"))
daily_mean <- mean(data$HopsPerMinute, na.rm = TRUE)
cog_time <- as.POSIXct(data$timestamp[floor(nrow(data)/2)], origin="1970-01-01") # Example CoG time
onset_time <- find_onset_time(data, cog_time, daily_mean, interval_minutes = 10, sustained_minutes = 30)
offset_time <- data %>%
filter(rolling_mean_30 > daily_mean) %>%
slice_tail(n = 1) %>%
pull(timestamp)
data <- data %>%
mutate(daily_mean = daily_mean,
onset_time = onset_time,
offset_time = offset_time)
return(data)
}
# Filter data for Cage 20
cage_20_data <- df %>%
filter(Cage == 2)
# Get unique dates for Cage 20
unique_dates <- unique(cage_20_data$Date)
# Initialize a list to store results
results <- list()
# Loop through each date to calculate metrics
for (date in unique_dates) {
daily_data <- cage_20_data %>%
filter(Date == date)
metrics <- calculate_metrics(daily_data)
results[[as.character(date)]] <- metrics
}
# Define the function to find onset time based on sustained activity above the mean for a given duration
find_onset_time <- function(df, cog_time, daily_mean, interval_minutes = 10, sustained_minutes = 30) {
duration_threshold <- sustained_minutes * 60
# Onset: first time activity reaches above the mean and stays above for sustained duration before CoG
df_before_cog <- df %>%
filter(timestamp <= cog_time) %>%
arrange(timestamp)
if (nrow(df_before_cog) == 0) {
return(NA)
}
cumulative_time_above_mean <- 0
onset_time <- NA
for (i in seq_len(nrow(df_before_cog))) {
if (df_before_cog$rolling_mean[i] > daily_mean) {
cumulative_time_above_mean <- cumulative_time_above_mean + interval_minutes * 60
if (cumulative_time_above_mean >= duration_threshold) {
# Check if the activity falls back below the mean
if (all(df_before_cog$rolling_mean[i:(i + duration_threshold / (interval_minutes * 60))] > daily_mean, na.rm = TRUE)) {
onset_time <- df_before_cog$timestamp[i]
break
}
}
} else {
cumulative_time_above_mean <- 0
}
}
return(onset_time)
}
# Calculate daily mean, onset time with custom function, and offset time with rolling mean of 30
calculate_metrics <- function(data) {
data <- data %>%
arrange(timestamp) %>%
mutate(rolling_mean_10 = rollmean(HopsPerMinute, k = 10, fill = NA, align = "right"),
rolling_mean_30 = rollmean(HopsPerMinute, k = 30, fill = NA, align = "right"))
daily_mean <- mean(data$HopsPerMinute, na.rm = TRUE)
cog_time <- as.POSIXct(data$timestamp[floor(nrow(data)/2)], origin="1970-01-01") # Example CoG time
onset_time <- find_onset_time(data, cog_time, daily_mean, interval_minutes = 10, sustained_minutes = 30)
offset_time <- data %>%
filter(rolling_mean_30 > daily_mean) %>%
slice_tail(n = 1) %>%
pull(timestamp)
if (length(offset_time) == 0) {
offset_time <- NA
}
data <- data %>%
mutate(daily_mean = daily_mean,
onset_time = onset_time,
offset_time = offset_time)
return(data)
}
# Filter data for Cage 20
cage_20_data <- df %>%
filter(Cage == 20)
# Get unique dates for Cage 20
unique_dates <- unique(cage_20_data$Date)
# Initialize a list to store results
results <- list()
# Loop through each date to calculate metrics
for (date in unique_dates) {
daily_data <- cage_20_data %>%
filter(Date == date)
if (nrow(daily_data) > 0) {
metrics <- calculate_metrics(daily_data)
results[[as.character(date)]] <- metrics
}
}
# Define the function to find onset time based on sustained activity above the mean for a given duration
find_onset_time <- function(df, cog_time, daily_mean, interval_minutes = 10, sustained_minutes = 30) {
duration_threshold <- sustained_minutes * 60
# Onset: first time activity reaches above the mean and stays above for sustained duration before CoG
df_before_cog <- df %>%
filter(timestamp <= cog_time) %>%
arrange(timestamp)
if (nrow(df_before_cog) == 0) {
return(NA)
}
cumulative_time_above_mean <- 0
onset_time <- NA
for (i in seq_len(nrow(df_before_cog))) {
if (df_before_cog$rolling_mean_10[i] > daily_mean) {
cumulative_time_above_mean <- cumulative_time_above_mean + interval_minutes * 60
if (cumulative_time_above_mean >= duration_threshold) {
# Check if the activity falls back below the mean
if (all(df_before_cog$rolling_mean_10[i:(i + duration_threshold / (interval_minutes * 60))] > daily_mean, na.rm = TRUE)) {
onset_time <- df_before_cog$timestamp[i]
break
}
}
} else {
cumulative_time_above_mean <- 0
}
}
return(onset_time)
}
# Calculate daily mean, onset time with custom function, and offset time with rolling mean of 30
calculate_metrics <- function(data) {
data <- data %>%
arrange(timestamp) %>%
mutate(rolling_mean_10 = rollmean(HopsPerMinute, k = 10, fill = NA, align = "right"),
rolling_mean_30 = rollmean(HopsPerMinute, k = 30, fill = NA, align = "right"))
daily_mean <- mean(data$HopsPerMinute, na.rm = TRUE)
cog_time <- as.POSIXct(data$timestamp[floor(nrow(data)/2)], origin="1970-01-01") # Example CoG time
onset_time <- find_onset_time(data, cog_time, daily_mean, interval_minutes = 10, sustained_minutes = 30)
offset_time <- data %>%
filter(rolling_mean_30 > daily_mean) %>%
slice_tail(n = 1) %>%
pull(timestamp)
if (length(offset_time) == 0) {
offset_time <- NA
}
data <- data %>%
mutate(daily_mean = daily_mean,
onset_time = onset_time,
offset_time = offset_time)
return(data)
}
# Filter data for Cage 20
cage_20_data <- df %>%
filter(Cage == 20)
# Get unique dates for Cage 20
unique_dates <- unique(cage_20_data$Date)
# Initialize a list to store results
results <- list()
# Loop through each date to calculate metrics
for (date in unique_dates) {
daily_data <- cage_20_data %>%
filter(Date == date)
if (nrow(daily_data) > 0) {
metrics <- calculate_metrics(daily_data)
results[[as.character(date)]] <- metrics
}
}
# Define the function to find onset time based on sustained activity above the mean for a given duration
find_onset_time <- function(df, cog_time, daily_mean, interval_minutes = 10, sustained_minutes = 30) {
duration_threshold <- sustained_minutes * 60
# Onset: first time activity reaches above the mean and stays above for sustained duration before CoG
df_before_cog <- df %>%
filter(timestamp <= cog_time) %>%
arrange(timestamp)
if (nrow(df_before_cog) == 0) {
return(NA)
}
cumulative_time_above_mean <- 0
onset_time <- NA
for (i in seq_len(nrow(df_before_cog))) {
if (!is.na(df_before_cog$rolling_mean_10[i]) && df_before_cog$rolling_mean_10[i] > daily_mean) {
cumulative_time_above_mean <- cumulative_time_above_mean + interval_minutes * 60
if (cumulative_time_above_mean >= duration_threshold) {
# Check if the activity falls back below the mean
if (all(df_before_cog$rolling_mean_10[i:(i + duration_threshold / (interval_minutes * 60))] > daily_mean, na.rm = TRUE)) {
onset_time <- df_before_cog$timestamp[i]
break
}
}
} else {
cumulative_time_above_mean <- 0
}
}
return(onset_time)
}
# Calculate daily mean, onset time with custom function, and offset time with rolling mean of 30
calculate_metrics <- function(data) {
data <- data %>%
arrange(timestamp) %>%
mutate(rolling_mean_10 = rollmean(HopsPerMinute, k = 10, fill = NA, align = "right"),
rolling_mean_30 = rollmean(HopsPerMinute, k = 30, fill = NA, align = "right"))
daily_mean <- mean(data$HopsPerMinute, na.rm = TRUE)
cog_time <- as.POSIXct(data$timestamp[floor(nrow(data)/2)], origin="1970-01-01") # Example CoG time
onset_time <- find_onset_time(data, cog_time, daily_mean, interval_minutes = 10, sustained_minutes = 30)
offset_time <- data %>%
filter(rolling_mean_30 > daily_mean) %>%
slice_tail(n = 1) %>%
pull(timestamp)
if (length(offset_time) == 0) {
offset_time <- NA
}
data <- data %>%
mutate(daily_mean = daily_mean,
onset_time = onset_time,
offset_time = offset_time)
return(data)
}
# Filter data for Cage 20
cage_20_data <- df %>%
filter(Cage == 20)
# Get unique dates for Cage 20
unique_dates <- unique(cage_20_data$Date)
# Initialize a list to store results
results <- list()
# Loop through each date to calculate metrics
for (date in unique_dates) {
daily_data <- cage_20_data %>%
filter(Date == date)
if (nrow(daily_data) > 0) {
metrics <- calculate_metrics(daily_data)
results[[as.character(date)]] <- metrics
}
}
# Combine results into a single data frame
combined_data <- bind_rows(results)
# Extract onset and offset times for each day
onset_offset_times <- combined_data %>%
select(Date, onset_time, offset_time) %>%
distinct() %>%
arrange(Date)
# Print the onset and offset times
print(onset_offset_times)
# Plotting
ggplot(combined_data, aes(x = timestamp, y = rolling_mean_10)) +
geom_rect(data = combined_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = start_time, xmax = as.POSIXct(paste(Date, "09:00"), format="%Y-%m-%d %H:%M"), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_rect(data = combined_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = as.POSIXct(paste(Date, "21:00"), format="%Y-%m-%d %H:%M"), xmax = start_time + days(1), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_line(aes(y = rolling_mean_10), color = "black") +
geom_hline(data = combined_data %>% distinct(Date, daily_mean), aes(yintercept = daily_mean), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = as.numeric(onset_time)), linetype = "dotted", color = "blue", size = 1) +
geom_vline(aes(xintercept = as.numeric(offset_time)), linetype = "dotted", color = "blue", size = 1) +
facet_wrap(~ Date, scales = "free_x", ncol = 1) +
labs(title = "Rolling Average and Onset/Offset Relative to CoG for Cage 20", x = "Time", y = "Rolling Average") +
theme_classic()
# Filter data for Cage 20
cage_20_data <- df %>%
filter(Cage == 2)
# Get unique dates for Cage 20
unique_dates <- unique(cage_20_data$Date)
# Initialize a list to store results
results <- list()
# Loop through each date to calculate metrics
for (date in unique_dates) {
daily_data <- cage_20_data %>%
filter(Date == date)
if (nrow(daily_data) > 0) {
metrics <- calculate_metrics(daily_data)
results[[as.character(date)]] <- metrics
}
}
# Combine results into a single data frame
combined_data <- bind_rows(results)
# Extract onset and offset times for each day
onset_offset_times <- combined_data %>%
select(Date, onset_time, offset_time) %>%
distinct() %>%
arrange(Date)
# Print the onset and offset times
print(onset_offset_times)
# Plotting
ggplot(combined_data, aes(x = timestamp, y = rolling_mean_10)) +
geom_rect(data = combined_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = start_time, xmax = as.POSIXct(paste(Date, "09:00"), format="%Y-%m-%d %H:%M"), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_rect(data = combined_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = as.POSIXct(paste(Date, "21:00"), format="%Y-%m-%d %H:%M"), xmax = start_time + days(1), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_line(aes(y = rolling_mean_10), color = "black") +
geom_hline(data = combined_data %>% distinct(Date, daily_mean), aes(yintercept = daily_mean), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = as.numeric(onset_time)), linetype = "dotted", color = "blue", size = 1) +
geom_vline(aes(xintercept = as.numeric(offset_time)), linetype = "dotted", color = "blue", size = 1) +
facet_wrap(~ Date, scales = "free_x", ncol = 1) +
labs(title = "Rolling Average and Onset/Offset Relative to CoG for Cage 20", x = "Time", y = "Rolling Average") +
theme_classic()
library(dplyr)
library(zoo)
library(ggplot2)
# Define the function to find onset time based on sustained activity above the mean for a given duration
find_onset_time <- function(df, cog_time, daily_mean, interval_minutes = 10, sustained_minutes = 30) {
duration_threshold <- sustained_minutes * 60
# Onset: first time activity reaches above the mean and stays above for sustained duration before CoG
df_before_cog <- df %>%
filter(timestamp <= cog_time) %>%
arrange(timestamp)
if (nrow(df_before_cog) == 0) {
return(NA)
}
cumulative_time_above_mean <- 0
onset_time <- NA
for (i in seq_len(nrow(df_before_cog))) {
if (!is.na(df_before_cog$rolling_mean_10[i]) && df_before_cog$rolling_mean_10[i] > daily_mean) {
cumulative_time_above_mean <- cumulative_time_above_mean + interval_minutes * 60
if (cumulative_time_above_mean >= duration_threshold) {
# Check if the activity falls back below the mean
if (all(df_before_cog$rolling_mean_10[i:(i + duration_threshold / (interval_minutes * 60))] > daily_mean, na.rm = TRUE)) {
onset_time <- df_before_cog$timestamp[i]
break
}
}
} else {
cumulative_time_above_mean <- 0
}
}
return(onset_time)
}
# Calculate daily mean, onset time with custom function, and offset time with rolling mean of 30
calculate_metrics <- function(data) {
data <- data %>%
arrange(timestamp) %>%
mutate(rolling_mean_10 = rollmean(HopsPerMinute, k = 10, fill = NA, align = "right"),
rolling_mean_30 = rollmean(HopsPerMinute, k = 30, fill = NA, align = "right"))
daily_mean <- mean(data$HopsPerMinute, na.rm = TRUE)
cog_time <- as.POSIXct(data$timestamp[floor(nrow(data)/2)], origin="1970-01-01") # Example CoG time
onset_time <- find_onset_time(data, cog_time, daily_mean, interval_minutes = 10, sustained_minutes = 30)
offset_time <- data %>%
filter(rolling_mean_30 > daily_mean) %>%
slice_tail(n = 1) %>%
pull(timestamp)
if (length(offset_time) == 0) {
offset_time <- NA
}
data <- data %>%
mutate(daily_mean = daily_mean,
onset_time = onset_time,
offset_time = offset_time)
return(data)
}
# Filter data for all cages
unique_cages <- unique(df$Cage)
# Initialize a list to store results
results <- list()
# Loop through each cage and date to calculate metrics
for (cage in unique_cages) {
cage_data <- df %>%
filter(Cage == cage)
unique_dates <- unique(cage_data$Date)
for (date in unique_dates) {
daily_data <- cage_data %>%
filter(Date == date)
if (nrow(daily_data) > 0) {
metrics <- calculate_metrics(daily_data)
results[[paste(cage, date, sep = "_")]] <- metrics
}
}
}
# Combine results into a single data frame
combined_data <- bind_rows(results)
# Extract onset and offset times for each cage and day
onset_offset_times <- combined_data %>%
select(Cage, Date, onset_time, offset_time) %>%
distinct() %>%
arrange(Cage, Date)
# Print the onset and offset times
print(onset_offset_times)
# Function to plot data for a specific cage
plot_cage_data <- function(cage_number) {
cage_data <- combined_data %>%
filter(Cage == cage_number)
ggplot(cage_data, aes(x = timestamp, y = rolling_mean_10)) +
geom_rect(data = cage_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = start_time, xmax = as.POSIXct(paste(Date, "09:00"), format="%Y-%m-%d %H:%M"), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_rect(data = cage_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = as.POSIXct(paste(Date, "21:00"), format="%Y-%m-%d %H:%M"), xmax = start_time + days(1), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_line(aes(y = rolling_mean_10), color = "black") +
geom_hline(data = cage_data %>% distinct(Date, daily_mean), aes(yintercept = daily_mean), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = as.numeric(onset_time)), linetype = "dotted", color = "blue", size = 1) +
geom_vline(aes(xintercept = as.numeric(offset_time)), linetype = "dotted", color = "blue", size = 1) +
facet_wrap(~ Date, scales = "free_x", ncol = 1) +
labs(title = paste("Rolling Average and Onset/Offset Relative to CoG for Cage", cage_number), x = "Time", y = "Rolling Average") +
theme_classic()
}
# Example: Plot data for Cage 20
plot_cage_data(20)
# Example: Plot data for Cage 20
plot_cage_data(2)
# Example: Plot data for Cage 20
plot_cage_data(4)
# Example: Plot data for Cage 20
plot_cage_data(8)
# Function to extract and print onset and offset times for a specific cage
extract_times <- function(cage_number) {
on_off_times <- combined_data %>%
filter(Cage == cage_number) %>%
select(Cage, Date, onset_time, offset_time) %>%
distinct() %>%
arrange(Date)
print(on_off_times)
}
# Example: Extract and print onset and offset times for Cage 20
extract_times(20)
# Example: Extract and print onset and offset times for Cage 20
extract_times(2)
# Function to plot data for a specific cage
plot_cage_data <- function(cage_number) {
cage_data <- combined_data %>%
filter(Cage == cage_number)
ggplot(cage_data, aes(x = timestamp, y = rolling_mean_10)) +
geom_rect(data = cage_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = start_time, xmax = as.POSIXct(paste(Date, "09:00"), format="%Y-%m-%d %H:%M"), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_rect(data = cage_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = as.POSIXct(paste(Date, "21:00"), format="%Y-%m-%d %H:%M"), xmax = start_time + days(1), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_line(aes(y = rolling_mean_10), color = "black") +
geom_hline(data = cage_data %>% distinct(Date, daily_mean), aes(yintercept = daily_mean), linetype = "dashed", color = "red") +
geom_point(aes(x = as.numeric(onset_time), y = 0), color = "blue", size = 2) +
geom_point(aes(x = as.numeric(offset_time), y = 0), color = "blue", size = 2) +
facet_wrap(~ Date, scales = "free_x", ncol = 1) +
labs(title = paste("Rolling Average and Onset/Offset Relative to CoG for Cage", cage_number), x = "Time", y = "Rolling Average") +
theme_classic()
}
# Example: Plot data for Cage 20
plot_cage_data(8)
#Plot
plot_cage_data <- function(cage_number) {
cage_data <- combined_data %>%
filter(Cage == cage_number)
ggplot(cage_data, aes(x = timestamp, y = rolling_mean_10)) +
geom_rect(data = cage_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = start_time, xmax = as.POSIXct(paste(Date, "09:00"), format="%Y-%m-%d %H:%M"), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_rect(data = cage_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = as.POSIXct(paste(Date, "21:00"), format="%Y-%m-%d %H:%M"), xmax = start_time + days(1), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_line(aes(y = rolling_mean_10), color = "black") +
geom_hline(data = cage_data %>% distinct(Date, daily_mean), aes(yintercept = daily_mean), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = as.numeric(onset_time)), linetype = "dotted", color = "blue", size = 1) +
geom_vline(aes(xintercept = as.numeric(offset_time)), linetype = "dotted", color = "blue", size = 1) +
facet_wrap(~ Date, scales = "free_x", ncol = 1) +
labs(title = paste("Rolling Average and Onset/Offset Relative to CoG for Cage", cage_number), x = "Time", y = "Rolling Average") +
theme_classic()
}
# Example: Plot data for Cage 20
plot_cage_data(8)
#Plot
plot_cage_data <- function(cage_number) {
cage_data <- combined_data %>%
filter(Cage == cage_number)
ggplot(cage_data, aes(x = timestamp, y = rolling_mean_10)) +
geom_rect(data = cage_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = start_time, xmax = as.POSIXct(paste(Date, "09:00"), format="%Y-%m-%d %H:%M"), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_rect(data = cage_data %>% mutate(start_time = as.POSIXct(paste(Date, "00:00"), format="%Y-%m-%d %H:%M")),
aes(xmin = as.POSIXct(paste(Date, "21:00"), format="%Y-%m-%d %H:%M"), xmax = start_time + days(1), ymin = -Inf, ymax = Inf),
fill = "grey", alpha = 0.5) +
geom_line(aes(y = rolling_mean_10), color = "black") +
geom_hline(data = cage_data %>% distinct(Date, daily_mean), aes(yintercept = daily_mean), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = as.numeric(onset_time)), linetype = "dotted", color = "blue", size = 2) +
geom_vline(aes(xintercept = as.numeric(offset_time)), linetype = "dotted", color = "blue", size = 2) +
facet_wrap(~ Date, scales = "free_x", ncol = 1) +
labs(title = paste("Rolling Average and Onset/Offset Relative to CoG for Cage", cage_number), x = "Time", y = "Rolling Average") +
theme_classic()
}
# Example: Plot data for Cage 20
plot_cage_data(2)
